# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dRaR-NuuYWfRIo5cuH1FtpAEa70waYm8
"""

import numpy as np
from scipy.stats import bernoulli
import random
import matplotlib.pyplot as plt
import seaborn as sn
import xlrd
import scipy as sp

sample_size = 100000
X_0, X_1, X_2, X_3, X_4 = 0, 0, 0, 0, 0
#after finding value of k
k = float(3/20)
prob_X_0 = 0.1
prob_X_1 = 1*k
prob_X_2 = 2*k
prob_X_3 = 2*k
prob_X_4 = k

sample0 = bernoulli.rvs(size = sample_size, p = prob_X_0)
for i in range(sample_size):
  if sample0[i] == 1:
    X_0 += 1

sample1 = bernoulli.rvs(size = sample_size, p = prob_X_1)
for i in range(sample_size):
  if sample1[i] == 1:
    X_1 += 1

sample2 = bernoulli.rvs(size = sample_size, p = prob_X_2)
for i in range(sample_size):
  if sample2[i] == 1:
    X_2 += 1

sample3 = bernoulli.rvs(size = sample_size, p = prob_X_3)
for i in range(sample_size):
  if sample3[i] == 1:
    X_3 += 1

sample4 = bernoulli.rvs(size = sample_size, p = prob_X_4)
for i in range(sample_size):
  if sample4[i] == 1:
    X_4 += 1

p_X_0 = X_0 /sample_size
p_X_1 = X_1 /sample_size
p_X_2 = X_2 /sample_size
p_X_3 = X_3 /sample_size
p_X_4 = X_4 /sample_size


PS1 = p_X_2 + p_X_3 + p_X_4
PS3 = (p_X_0 + p_X_1 + p_X_2)

print("Probability of studying at least two hours = %f"% PS1)
print("probability of studying exactly two hours = %f"%(p_X_2))
print("Probability of studyiong atmost two hours = %f"% PS3)


pmf = [ prob_X_0, prob_X_1,  prob_X_2,  prob_X_3,  prob_X_4]
X = [0,1,2,3,4]

plt.xlim([0,4])
plt.ylim([0,0.5])
plt.title('PMF')
plt.xlabel('X')
plt.ylabel('Pr(X)')
markerline, stemlines, baseline = plt.stem(X, pmf, '-')
plt.show()


pmf = [ prob_X_0, prob_X_0 + prob_X_1,  prob_X_0 + prob_X_1 + prob_X_2,   prob_X_0 + prob_X_1 + prob_X_2 + prob_X_3,  prob_X_0 + prob_X_1 + prob_X_2 + prob_X_3 + prob_X_4]
X = [0,1,2,3,4]

plt.xlim([0,4])
plt.ylim([0,1])
plt.title('CDF')
plt.xlabel('X')
plt.ylabel('F(X)')
markerline, stemlines, baseline = plt.stem(X, pmf, '-')
plt.show()


cases = ["x = 1", "x = 2", "x = 3"]
prob_T = [0.75, 0.3, 0.55]
prob_S = [PS1, p_X_2, PS3]

x = np.arange(len(cases))
plt.stem(x + 0.00, prob_T, markerfmt='o',use_line_collection=True, basefmt=None , linefmt='orange' ,label='Theoritical')
plt.stem(x + 0.25, prob_S, markerfmt='o', use_line_collection=True, basefmt=None  ,linefmt='b', label='Simulated')
plt.xlabel('cases')
plt.ylabel('Probability')
plt.xticks(x + 0.25/2,[1, 2, 3])
plt.legend()
plt.grid()
plt.show()